name: Build and Push Docker Images

# This workflow only runs manually via workflow_dispatch
# Go to Actions > Build and Push Docker Images > Run workflow

on:
  workflow_dispatch:
    inputs:
      build_web:
        description: 'Build web image'
        required: false
        default: true
        type: boolean
      build_api:
        description: 'Build api image'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_WEB: ${{ github.repository }}-web
  IMAGE_NAME_API: ${{ github.repository }}-api

jobs:
  build-web:
    name: Build and Push Web Image
    runs-on: ubuntu-latest
    if: github.event.inputs.build_web == 'true'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: version
        run: |
          VERSION=$(jq -r '.version' web/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Web version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
          tags: |
            type=raw,value=v${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image summary
        run: |
          echo "### Web Image Published :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:v${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:latest\`" >> $GITHUB_STEP_SUMMARY

  build-api:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    if: github.event.inputs.build_api == 'true'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: version
        run: |
          VERSION=$(jq -r '.version' api/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "API version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=raw,value=v${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image summary
        run: |
          echo "### API Image Published :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:v${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest\`" >> $GITHUB_STEP_SUMMARY

